openapi: 3.0.3
info:
  title: Library Management System API
  description: A RESTful API for managing library books, users, and transactions.
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
    description: Local development server

paths:
  # Books Management
  /books:
    get:
      summary: Retrieve a list of all books
      responses:
        '200':
          description: List of books retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Add a new book to the library
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid input or duplicate ISBN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /books/{id}:
    get:
      summary: Retrieve a specific book by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Book retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an existing book
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid input or duplicate ISBN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Remove a book from the library
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Book deleted successfully
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Users Management
  /users:
    get:
      summary: Retrieve a list of all users
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input or duplicate email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}:
    get:
      summary: Retrieve a specific user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an existing user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input or duplicate email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a user from the system
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Transactions Management
  /transactions/borrow:
    post:
      summary: Borrow a book for a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BorrowRequest'
      responses:
        '201':
          description: Book borrowed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: No copies available or invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: User has reached borrowing limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /transactions/return:
    post:
      summary: Return a borrowed book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReturnRequest'
      responses:
        '200':
          description: Book returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /transactions/user/{userId}:
    get:
      summary: Get borrowing history for a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Borrowing history retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '404':
          description: No transactions found for user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /transactions/book/{bookId}:
    get:
      summary: Get transaction history for a book
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Transaction history retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '404':
          description: No transactions found for book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        author:
          type: string
        isbn:
          type: string
        publicationYear:
          type: integer
          format: int32
        genre:
          type: string
        totalCopies:
          type: integer
          format: int32
        availableCopies:
          type: integer
          format: int32
      required:
        - title
        - author
        - isbn
        - totalCopies
        - availableCopies
    BookRequest:
      type: object
      properties:
        title:
          type: string
        author:
          type: string
        isbn:
          type: string
        publicationYear:
          type: integer
          format: int32
        genre:
          type: string
        totalCopies:
          type: integer
          format: int32
        availableCopies:
          type: integer
          format: int32
      required:
        - title
        - author
        - isbn
        - totalCopies
        - availableCopies
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        registrationDate:
          type: string
          format: date
        membershipStatus:
          type: string
          enum: [ Active, Inactive ]
      required:
        - name
        - email
        - registrationDate
        - membershipStatus
    UserRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        registrationDate:
          type: string
          format: date
        membershipStatus:
          type: string
          enum: [ Active, Inactive ]
      required:
        - name
        - email
        - registrationDate
        - membershipStatus
    Transaction:
      type: object
      properties:
        transactionId:
          type: integer
          format: int64
        bookTitle:
          type: string
        userName:
          type: string
        borrowDate:
          type: string
          format: date
        returnDate:
          type: string
          format: date
          nullable: true
        status:
          type: string
          enum: [ Borrowed, Returned ]
      required:
        - transactionId
        - bookTitle
        - userName
        - borrowDate
        - status
    BorrowRequest:
      type: object
      properties:
        bookId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
      required:
        - bookId
        - userId
    ReturnRequest:
      type: object
      properties:
        transactionId:
          type: integer
          format: int64
      required:
        - transactionId
    Error:
      type: object
      properties:
        error:
          type: string
      required:
        - error